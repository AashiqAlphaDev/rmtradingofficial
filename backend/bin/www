#!/usr/bin/env node

/**
 * Module dependencies.
 */
var co = require("co");
const createError = require('http-errors')
const _ = require("underscore")

global.httpCoWrap = function (generator) {
	return co.wrap(function* (req, res, next) {
		try {
			yield generator(req, res, next);
		} catch (err) {
			if (!err.statusCode) {
				err.statusCode = 500;
			}
			next(err);
		}
	});
}


global.validate = function (data, params, message) {
	for (var param in params) {
		var key = _.find(data, function (value, key) {
			return (params[param] == key)
		});
		if (!key) {
			var err = createError(400);
			err.message = _.template(message)({param: params[param]});
			throw err;
		}
	}
}

global.queryValidate = function (queryParam, message) {
	if (!queryParam) {
		var err = createError(400);
		err.message = message;
		throw err;
	}
}


require("../db")
var app = require('../app');
var debug = require('debug')('adbackend:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
